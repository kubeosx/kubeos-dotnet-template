apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: kubeos-dotnet-template
  title: "Kubeos .Net 7 Service with Docker Build"
  description: "Create a simple web api using .Net 7, which has the docker file, It also has capability of adding github pipeline to build docker image and push it to docker hub."
  tags:
    - recommended
    - dotnet
    - github
    - docker
    - kubernetes
spec:
  owner: platform-engineering-team
  type: service
  dependsOn: ['component:kubeos', component:kubeos-cluster, component:kubeos-baseline]
  annotations:
    github.com/project-slug: kubeosx/kubeos-dotnet template
    backstage.io/techdocs-ref: dir:.
  parameters:
    - title: Dotnet Solution/Project details
      required:
        - component_id # solution name
        - project_name
        - owner
        - project_name
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component - will be used for Dotnet Solution file name
          ui:field: EntityNamePicker
          maxLength: 50
          pattern: '^[a-z0-9]+$'
        description:
          title: Description
          type: string
          description: Help others understand what this web api is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
        project_name:
          title: Name
          type: string
          description: Name of the project
          maxLength: 50
          pattern: '^[a-z0-9]+$'
    - title: Repository details
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
    - title: Provide Docker information
      required:
        - docker_username
        - docker_password
      properties:
        docker_username:
          title: Name
          type: string
          description: Docker user name for login and will be pushed to hub.
          ui:field: EntityNamePicker
        docker_password:
          title: Password
          type: string
          description: Passwod for Login, will be stored as secrets

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          project_name: ${{ parameters.project_name }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          docker_username: ${{ parameters.docker_username }}
          project_k8_namespace: ${{ parameters.project_name }}
          http_port: 8080

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: main
        repoVisibility: public
        secrets:
          "DOCKER_USER": ${{ parameters.docker_username }}
          "DOCKER_PASSWORD" :  ${{ parameters.docker_password }}
          "AppName": ${{ parameters.project_name }}


    # Fetch Cloud CLuster Repo, Which is responsible to deploying using FLux
    - id: fetch-remote
      name: Fetch Remote kustomization
      action: fetch:plain
      input:
        url: https://github.com/iamsourabh-in/cloud-cluster.git
        targetPath: kubeos



    # Fetch a remote repo for getting template to commit in flux repo.
    - id: fetch-remote
      name: Fetch Remote kustomization
      action: fetch:template
      input:
        url: https://github.com/iamsourabh-in/kubeos-deployer-template.git
        path:
        targetPath: kubeos/clusters/dev
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          project_name: ${{ parameters.project_name }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          docker_username: ${{ parameters.docker_username }}
          http_port: 8080 

          
    # update the kustomization file 
    - id: append-file
      name: Append To File Or Create New
      action: roadiehq:utils:fs:append
      input:
        path: kubeos/clusters/dev/kustomization.yaml
        content: '  - ${{ parameters.project_name }}/${{ parameters.project_name }}.yaml'

    # PR back the change
    - id: pr-repo
      name: PR to repo
      action: publish:github:pull-request
      input:
        repoUrl: github.com?repo=cloud-cluster&owner=iamsourabh-in
        description: This is commiting project ${{ parameters.component_id }} for deployment
        branchName: feature/Onboarding-${{ parameters.component_id }}
        targetBranchName: main
        gitCommitMessage: Add New Deployment Config
        title: PR for new app :${{ parameters.component_id }}
        sourcePath: kubeos/clusters/dev
        targetPath: clusters/dev


    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output: 
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
      - title: Deployment Repo
        url: ${{ steps.pr-repo.output.remoteUrl }}
      - title: Pull Request Number
        url: ${{ steps.pr-repo.output.pullRequestNumber }}
